
PROJECT_MC1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000f6  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  0000014a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000014a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000017c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000090  00000000  00000000  000001b8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000081d  00000000  00000000  00000248  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000068c  00000000  00000000  00000a65  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000046d  00000000  00000000  000010f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000114  00000000  00000000  00001560  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000038b  00000000  00000000  00001674  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000000ff  00000000  00000000  000019ff  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000060  00000000  00000000  00001afe  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 3b 00 	jmp	0x76	; 0x76 <__vector_13>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 36 00 	call	0x6c	; 0x6c <main>
  64:	0c 94 79 00 	jmp	0xf2	; 0xf2 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <main>:
#include "USART.h"
#include "SPI.h"

int main(void)
{
	USART_Init();
  6c:	0e 94 6c 00 	call	0xd8	; 0xd8 <USART_Init>
	SPI_Init();
  70:	0e 94 60 00 	call	0xc0	; 0xc0 <SPI_Init>
	
    while (1) 
    {

    }
  74:	ff cf       	rjmp	.-2      	; 0x74 <main+0x8>

00000076 <__vector_13>:
}

ISR (USART_RXC_vect)
{
  76:	1f 92       	push	r1
  78:	0f 92       	push	r0
  7a:	0f b6       	in	r0, 0x3f	; 63
  7c:	0f 92       	push	r0
  7e:	11 24       	eor	r1, r1
  80:	2f 93       	push	r18
  82:	3f 93       	push	r19
  84:	4f 93       	push	r20
  86:	5f 93       	push	r21
  88:	6f 93       	push	r22
  8a:	7f 93       	push	r23
  8c:	8f 93       	push	r24
  8e:	9f 93       	push	r25
  90:	af 93       	push	r26
  92:	bf 93       	push	r27
  94:	ef 93       	push	r30
  96:	ff 93       	push	r31
	Uint8t data = UDR;
  98:	8c b1       	in	r24, 0x0c	; 12
	SPI_Transmit(data); 
  9a:	0e 94 68 00 	call	0xd0	; 0xd0 <SPI_Transmit>
  9e:	ff 91       	pop	r31
  a0:	ef 91       	pop	r30
  a2:	bf 91       	pop	r27
  a4:	af 91       	pop	r26
  a6:	9f 91       	pop	r25
  a8:	8f 91       	pop	r24
  aa:	7f 91       	pop	r23
  ac:	6f 91       	pop	r22
  ae:	5f 91       	pop	r21
  b0:	4f 91       	pop	r20
  b2:	3f 91       	pop	r19
  b4:	2f 91       	pop	r18
  b6:	0f 90       	pop	r0
  b8:	0f be       	out	0x3f, r0	; 63
  ba:	0f 90       	pop	r0
  bc:	1f 90       	pop	r1
  be:	18 95       	reti

000000c0 <SPI_Init>:

void SPI_Init (void)
{
	// set directions for Master
	#if SPI_MODE == MASTER
	SET_BIT(SPI_PORT, MOSI_PIN);
  c0:	bd 9a       	sbi	0x17, 5	; 23
	CLR_BIT(SPI_PORT, MISO_PIN);
  c2:	be 98       	cbi	0x17, 6	; 23
	SET_BIT(SPI_PORT, CLK_PIN);
  c4:	bf 9a       	sbi	0x17, 7	; 23
	SET_BIT(SPI_PORT, SS_PIN);
  c6:	bc 9a       	sbi	0x17, 4	; 23
	sei();
  c8:	78 94       	sei
	SPCR = 0xF3;        // 1111 0011
  ca:	83 ef       	ldi	r24, 0xF3	; 243
  cc:	8d b9       	out	0x0d, r24	; 13
  ce:	08 95       	ret

000000d0 <SPI_Transmit>:
	SPCR = 0xE3;   // 1110 0011
	#endif
}
void SPI_Transmit (Uint8t data)
{
	SPDR = data;
  d0:	8f b9       	out	0x0f, r24	; 15
	while (GET_BIT(SPSR, SPIF) != 1); 
  d2:	77 9b       	sbis	0x0e, 7	; 14
  d4:	fe cf       	rjmp	.-4      	; 0xd2 <SPI_Transmit+0x2>
}
  d6:	08 95       	ret

000000d8 <USART_Init>:

void USART_Init (void)
{
	Uint16t UBRR_val = 0;
	// Define the Tx & Rx direction 
	SET_BIT(DDRD, PD1); 
  d8:	89 9a       	sbi	0x11, 1	; 17
	CLR_BIT(DDRD, PD0);
  da:	88 98       	cbi	0x11, 0	; 17
	
	sei();
  dc:	78 94       	sei

	UCSRB = 0x00;
  de:	1a b8       	out	0x0a, r1	; 10
	UCSRB = 0x90;
  e0:	80 e9       	ldi	r24, 0x90	; 144
  e2:	8a b9       	out	0x0a, r24	; 10
	//UCSRB = (1 << RXEN) | (1 << TXEN) | (1 << RXCIE) | (1 << TXCIE); //1001 0000
	UCSRC = 0x00;
  e4:	10 bc       	out	0x20, r1	; 32
	UCSRC = 0x86;
  e6:	86 e8       	ldi	r24, 0x86	; 134
  e8:	80 bd       	out	0x20, r24	; 32
	//UCSRC = (1 << URSEL) | (1 << UCSZ1) | (1 << UCSZ0);    // 1000 0110
	
	UBRR_val = (FRQ / (16 * BAUDRATE)) - 1;
	UBRRL = UBRR_val;
  ea:	87 e6       	ldi	r24, 0x67	; 103
  ec:	89 b9       	out	0x09, r24	; 9
	UBRRH = (UBRR_val >> 8);
  ee:	10 bc       	out	0x20, r1	; 32
  f0:	08 95       	ret

000000f2 <_exit>:
  f2:	f8 94       	cli

000000f4 <__stop_program>:
  f4:	ff cf       	rjmp	.-2      	; 0xf4 <__stop_program>
